name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        compiler:
          - { compiler: gcc, version: 11 }
          - { compiler: clang, version: 12, stdlib: libstdc++ }
          - { compiler: clang, version: 12, stdlib: libc++ }
        sanitize: [none, undefined]
        configuration: [Debug, Release, RelWithDebInfo]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      uses: textbook/git-checkout-submodule-action@master

    - name: Install gcc ${{matrix.compiler.version}}
      run:   |
        sudo apt update
        sudo apt install gcc-${{matrix.compiler.version}} g++-${{matrix.compiler.version}}
      shell: bash
      if: ${{matrix.compiler.compiler == 'gcc'}}

    - name: Install valgrind
      run:   |
        sudo apt update
        sudo apt install valgrind
      shell: bash
      if: ${{matrix.sanitize == 'none' && matrix.os == 'linux-latest'}}

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: |
          ./llvm
        key: llvm-12.0.1
      if: ${{matrix.compiler.compiler == 'clang'}}
    - name: Install LLVM and Clang
      uses: DCNick3/install-llvm-action@master
      with:
        version: ${{matrix.compiler.version}}
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      if: ${{matrix.compiler.compiler == 'clang'}}


    - name: "Use gcc"
      run: echo -e "CC=gcc-${{matrix.compiler.version}}\nCXX=g++-${{matrix.compiler.version}}" >> $GITHUB_ENV
      if: ${{matrix.compiler.compiler == 'gcc'}}
    - name: "Use clang"
      run: echo -e "CC=${{env.LLVM_PATH}}/bin/clang\nCXX=${{env.LLVM_PATH}}/bin/clang++" >> $GITHUB_ENV
      if: ${{matrix.compiler.compiler == 'clang'}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >-
        cmake -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=${{matrix.configuration}}
        -DSANITIZE=${{matrix.sanitize}}
        -DSTDLIB=${{matrix.compiler.stdlib}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.configuration}} --parallel

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.configuration}}

    - name: Test with valgrind
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: valgrind --trace-children=yes ctest -C ${{matrix.configuration}} -j 3
      if: ${{matrix.sanitize == 'none' && matrix.os == 'linux-latest'}}
      
